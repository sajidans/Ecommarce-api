Ecommerce API Documentation

Overview
This document provides a comprehensive guide to the Ecommerce API, built with Laravel, designed to manage Categories, SubCategories, and Products with Variants. The API supports CRUD operations, image uploads, caching, and validation.

- Base URL: http://localhost:8000/api/
- Framework: Laravel 12.x+
- Database: MySQL
- Authentication: Not required (public API for this version)

Table of Contents
1. Categories
2. SubCategories
3. Products
4. Request/Response Format
5. Error Codes
6. Usage Examples

1. Categories

1.1 GET /categories
- Description: Retrieve all categories with their subcategories.
- Method: GET
- Parameters: None
- Response:
  {
    "status": true,
    "data": [
      {
        "id": 1,
        "name": "Electronics",
        "subCategories": [
          {"id": 1, "name": "Mobiles", "category_id": 1}
        ],
        "created_at": "2025-04-13T10:00:00Z",
        "updated_at": "2025-04-13T10:00:00Z"
      }
    ]
  }
- Status Code: 200

1.2 POST /categories
- Description: Create a new category.
- Method: POST
- Request Body:
  {
    "name": "Clothing"
  }
- Response:
  {
    "status": true,
    "message": "Category created successfully",
    "data": {
      "id": 2,
      "name": "Clothing",
      "created_at": "2025-04-13T10:01:00Z",
      "updated_at": "2025-04-13T10:01:00Z"
    }
  }
- Status Code: 201
- Validation Rules: name (required, string, unique)

1.3 GET /categories/{id}
- Description: Retrieve a specific category.
- Method: GET
- Parameters: id (integer)
- Response:
  {
    "status": true,
    "data": {
      "id": 1,
      "name": "Electronics",
      "subCategories": [
        {"id": 1, "name": "Mobiles", "category_id": 1}
      ],
      "created_at": "2025-04-13T10:00:00Z",
      "updated_at": "2025-04-13T10:00:00Z"
    }
  }
- Status Code: 200
- Error (if not found):
  {
    "status": false,
    "message": "Category not found"
  }
- Status Code: 404

1.4 PUT /categories/{id}
- Description: Update a category.
- Method: PUT
- Parameters: id (integer)
- Request Body:
  {
    "name": "Updated Electronics"
  }
- Response:
  {
    "status": true,
    "message": "Category Updated Successfully",
    "data": {
      "id": 1,
      "name": "Updated Electronics",
      "created_at": "2025-04-13T10:00:00Z",
      "updated_at": "2025-04-13T10:02:00Z"
    }
  }
- Status Code: 200
- Validation Rules: name (required, string, unique except for current id)

1.5 DELETE /categories/{id}
- Description: Delete a category.
- Method: DELETE
- Parameters: id (integer)
- Response:
  {
    "status": true,
    "message": "Category Deleted Successfully"
  }
- Status Code: 200
- Error (if not found):
  {
    "status": false,
    "message": "Category not found"
  }
- Status Code: 404

2. SubCategories

2.1 GET /subcategories
- Description: Retrieve all subcategories with their categories.
- Method: GET
- Parameters: None
- Response:
  {
    "status": true,
    "data": [
      {
        "id": 1,
        "name": "Mobiles",
        "category_id": 1,
        "category": {"id": 1, "name": "Electronics"},
        "created_at": "2025-04-13T10:00:00Z",
        "updated_at": "2025-04-13T10:00:00Z"
      }
    ]
  }
- Status Code: 200

2.2 POST /subcategories
- Description: Create a new subcategory.
- Method: POST
- Request Body:
  {
    "category_id": 1,
    "name": "Laptops"
  }
- Response:
  {
    "status": true,
    "message": "SubCategory Created Successfully",
    "data": {
      "id": 2,
      "category_id": 1,
      "name": "Laptops",
      "created_at": "2025-04-13T10:01:00Z",
      "updated_at": "2025-04-13T10:01:00Z"
    }
  }
- Status Code: 201
- Validation Rules: category_id (required, exists in categories), name (required, string, unique)

2.3 GET /subcategories/{id}
- Description: Retrieve a specific subcategory.
- Method: GET
- Parameters: id (integer)
- Response:
  {
    "status": true,
    "data": {
      "id": 1,
      "name": "Mobiles",
      "category_id": 1,
      "category": {"id": 1, "name": "Electronics"},
      "created_at": "2025-04-13T10:00:00Z",
      "updated_at": "2025-04-13T10:00:00Z"
    }
  }
- Status Code: 200
- Error (if not found):
  {
    "status": false,
    "message": "SubCategory not found"
  }
- Status Code: 404

2.4 PUT /subcategories/{id}
- Description: Update a subcategory.
- Method: PUT
- Parameters: id (integer)
- Request Body:
  {
    "category_id": 1,
    "name": "Updated Mobiles"
  }
- Response:
  {
    "status": true,
    "message": "SubCategory Updated Successfully",
    "data": {
      "id": 1,
      "category_id": 1,
      "name": "Updated Mobiles",
      "created_at": "2025-04-13T10:00:00Z",
      "updated_at": "2025-04-13T10:02:00Z"
    }
  }
- Status Code: 200
- Validation Rules: category_id (required, exists in categories), name (required, string, unique except for current id)

2.5 DELETE /subcategories/{id}
- Description: Delete a subcategory.
- Method: DELETE
- Parameters: id (integer)
- Response:
  {
    "status": true,
    "message": "SubCategory Deleted Successfully"
  }
- Status Code: 200
- Error (if not found):
  {
    "status": false,
    "message": "SubCategory not found"
  }
- Status Code: 404

3. Products

3.1 GET /products
- Description: Retrieve all products with variants, categories, and subcategories.
- Method: GET
- Parameters: None
- Response:
  {
    "status": true,
    "data": [
      {
        "id": 1,
        "name": "Smartphone",
        "category_id": 1,
        "subcategory_id": 1,
        "description": "Latest smartphone model",
        "price": 499.99,
        "image": "products/sample.jpg",
        "img_url": "http://localhost:8000/storage/products/sample.jpg",
        "variants": [
          {"id": 1, "name": "128GB", "price": 499.99, "stock": 10}
        ],
        "category": {"id": 1, "name": "Electronics"},
        "subcategory": {"id": 1, "name": "Mobiles"},
        "created_at": "2025-04-13T10:00:00Z",
        "updated_at": "2025-04-13T10:00:00Z"
      }
    ]
  }
- Status Code: 200

3.2 POST /products
- Description: Create a new product.
- Method: POST
- Request Body:
  {
    "name": "Smartphone",
    "category_id": 1,
    "subcategory_id": 1,
    "description": "Latest smartphone model",
    "price": 499.99,
    "image": "file (optional)",
    "variants": "[{\"name\": \"128GB\", \"price\": 499.99, \"stock\": 10}, {\"name\": \"256GB\", \"price\": 599.99, \"stock\": 5}]"
  }
- Response:
  {
    "status": true,
    "message": "Product Added Successfully",
    "data": {
      "id": 1,
      "name": "Smartphone",
      "category_id": 1,
      "subcategory_id": 1,
      "description": "Latest smartphone model",
      "price": 499.99,
      "image": "products/sample.jpg",
      "img_url": "http://localhost:8000/storage/products/sample.jpg",
      "variants": [
        {"id": 1, "name": "128GB", "price": 499.99, "stock": 10},
        {"id": 2, "name": "256GB", "price": 599.99, "stock": 5}
      ],
      "created_at": "2025-04-13T10:01:00Z",
      "updated_at": "2025-04-13T10:01:00Z"
    }
  }
- Status Code: 201
- Validation Rules:
  - name (required, string, unique)
  - category_id (required, exists in categories)
  - subcategory_id (required, exists in sub_categories)
  - price (required, numeric)
  - image (optional, image file: jpeg, png, jpg, max 2MB)
  - variants (required, JSON string of variant array)

3.3 GET /products/{id}
- Description: Retrieve a specific product.
- Method: GET
- Parameters: id (integer)
- Response:
  {
    "status": true,
    "message": "Product fetched successfully!",
    "data": {
      "id": 1,
      "name": "Smartphone",
      "category_id": 1,
      "subcategory_id": 1,
      "description": "Latest smartphone model",
      "price": 499.99,
      "image": "products/sample.jpg",
      "img_url": "http://localhost:8000/storage/products/sample.jpg",
      "variants": [
        {"id": 1, "name": "128GB", "price": 499.99, "stock": 10}
      ],
      "created_at": "2025-04-13T10:00:00Z",
      "updated_at": "2025-04-13T10:00:00Z"
    }
  }
- Status Code: 200
- Error (if not found):
  {
    "status": false,
    "message": "Product not found"
  }
- Status Code: 404

3.4 PUT /products/{id}
- Description: Update a product.
- Method: PUT
- Parameters: id (integer)
- Request Body: Similar to POST request.
- Response:
  {
    "status": true,
    "message": "Product Updated Successfully",
    "data": {
      "id": 1,
      "name": "Updated Smartphone",
      "category_id": 1,
      "subcategory_id": 1,
      "description": "Updated smartphone model",
      "price": 549.99,
      "image": "products/updated.jpg",
      "img_url": "http://localhost:8000/storage/products/updated.jpg",
      "variants": [
        {"id": 1, "name": "128GB", "price": 549.99, "stock": 15}
      ],
      "created_at": "2025-04-13T10:00:00Z",
      "updated_at": "2025-04-13T10:02:00Z"
    }
  }
- Status Code: 200
- Validation Rules: Same as POST

3.5 DELETE /products/{id}
- Description: Delete a product.
- Method: DELETE
- Parameters: id (integer)
- Response:
  {
    "status": true,
    "message": "Product Deleted Successfully"
  }
- Status Code: 200
- Error (if not found):
  {
    "status": false,
    "message": "Product not found"
  }
- Status Code: 404

4. Request/Response Format
- Request: JSON format with appropriate headers (Content-Type: application/json).
- Response: JSON with consistent structure:
  - status: Boolean (true/false)
  - message: String (success/error message)
  - data: Object/Array (payload data)
  - errors: Object (validation errors, if any)

5. Error Codes
- 200: Success
- 201: Resource created
- 400: Bad request
- 404: Resource not found
- 422: Validation error
- 500: Server error

6. Usage Examples
Create a Product (cURL)
curl -X POST "http://localhost:8000/api/products" \
-H "Content-Type: application/json" \
-d '{"name":"Smartphone","category_id":1,"subcategory_id":1,"description":"Latest model","price":499.99,"variants":"[{\"name\":\"128GB\",\"price\":499.99,\"stock\":10}]"}'

Retrieve All Products (Postman)
- Method: GET
- URL: http://localhost:8000/api/products
- Response: View JSON in the response body.

Notes
- Ensure the storage link is created: php artisan storage:link for image access.
- Cache is set for 2 minutes; clear cache with php artisan cache:clear if needed.
- This documentation is based on the API as of April 13, 2025.